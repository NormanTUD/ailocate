#!/bin/bash

RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

SCRIPT_DIR=$(dirname $(realpath "$0"))

export IS_TESTING=1

cd $SCRIPT_DIR

cd ..

if [[ -n "$VIRTUAL_ENV" ]]; then
    deactivate
fi

FINAL_EXIT_CODE=0

tmp_db_file="$HOME/db_file"

function run_and_fail {
	name=$1
	code=$2
	wanted_exit_code=$3

	if [[ $FINAL_EXIT_CODE -eq 0 ]]; then
		echo -e "${YELLOW}Running $name${NC}"

		eval "$code"

		exit_code=$?

		if [[ $exit_code -ne $wanted_exit_code ]]; then
			echo -e "${RED}Failed: $code got $exit_code, wanted exit-code $wanted_exit_code${NC}"
			FINAL_EXIT_CODE=1
		fi
	else
		echo -e "${YELLOW}Skipping $name because an earlier test has failed${NC}"
	fi
}

find_missing_f_code="cat .smartlocate.py | grep 'print'  | grep '\{' | grep -v 'f\"' | grep '\"'"

nr_of_missing_f_strings=$(eval "$find_missing_f_code" | wc -l)

if [[ $nr_of_missing_f_strings -ne 0 ]]; then
	echo -e "${RED}Tests failed: There are $nr_of_missing_f_strings missing f's in print statements with []-brackets. Run '$find_missing_f_code' to see.${NC}"
	
	FINAL_EXIT_CODE=1
fi

run_and_fail "Bash-Syntax-Check" "bash -n smartlocate" 0

run_and_fail "mypy" "bash tests/mypy" 0

run_and_fail "flake8" "bash tests/flake8" 0

run_and_fail "pylint" "bash tests/pylint" 0

run_and_fail "Param check (yolo_min_confidence_for_saving -123)" "bash smartlocate --yolo_min_confidence_for_saving -123" 2

export DONT_INSTALL_MODULES=1

run_and_fail "Param check (yolo_min_confidence_for_saving 123)" "bash smartlocate --yolo_min_confidence_for_saving 123" 2

run_and_fail "Param check (yolo_threshold -123)" "bash smartlocate --yolo_threshold -123" 2

run_and_fail "Param check (yolo_threshold 123)" "bash smartlocate --yolo_threshold 123" 2

run_and_fail "Param check (max_size -123)" "bash smartlocate --max_size -123" 2

run_and_fail "Wrong dir" "bash smartlocate --dir '/Â§FDOISD'" 2

run_and_fail "Without wrapper" "python3 .smartlocate.py" 1

run_and_fail "Compiling main script" "python3 -m py_compile .smartlocate.py" 0

run_and_fail "Indexing" "bash smartlocate --index --dir $(pwd) --dbfile $tmp_db_file" 0

run_and_fail "Main-script without parameters (except for dbfile)" "bash smartlocate --dbfile $tmp_db_file" 0

run_and_fail "Main-script with --help" "bash smartlocate --help" 0

run_and_fail "Search for cat" "bash smartlocate --dbfile $tmp_db_file cat" 0

run_and_fail "Search for dog" "bash smartlocate --dbfile $tmp_db_file cat" 0

run_and_fail "Search for Mittelbach" "bash smartlocate --dbfile $tmp_db_file Mittelbach" 0

run_and_fail "Search for qr-code wikipedia" "bash smartlocate --dbfile $tmp_db_file wikipedia" 0

run_and_fail "Vacuuming" "bash smartlocate --dbfile $tmp_db_file --vacuum" 0

if [[ -e $tmp_db_file ]]; then
	echo -e "${GREEN}Deleting tmp_db_file $tmp_db_file${NC}"
	rm $tmp_db_file
fi

if [[ $FINAL_EXIT_CODE -eq 0 ]]; then
	echo -e "${GREEN}Tests successful${NC}"
else
	echo -e "${RED}Tests failed${NC}"
fi

exit $FINAL_EXIT_CODE
