#!/bin/bash

function echoerr() {
        echo "$@" 1>&2
}

function yellow_text {
        echoerr -e "\e\033[0;33m$1\e[0m"
}

function red_text {
        echoerr -e "\e[31m$1\e[0m"
}

function green_text {
        echoerr -e "\e\033[0;32m$1\e[0m"
}

_cluster=""

if env | grep CLUSTERHOST | sed -e 's#.*\.##' 2>/dev/null >/dev/null; then
	MYCLUSTER_HOST=$(env | grep CLUSTERHOST | sed -e 's#.*\.##')
	if [[ -n $MYCLUSTER_HOST ]]; then
		_cluster="_$MYCLUSTER_HOST"
	fi
fi
VENV_DIR_NAME=".omniax_$(uname -m)_$(python3 --version | sed -e 's# #_#g')$_cluster"

ROOT_VENV_DIR=$HOME

if [[ -n $root_venv_dir ]] && [[ -d $root_venv_dir ]]; then
	ROOT_VENV_DIR=$root_venv_dir
fi

VENV_DIR=$ROOT_VENV_DIR/$VENV_DIR_NAME

SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

cd $SCRIPT_DIR

cd ..

source .install.sh

PYLINTRC_FILE="tests/pylint.rc"
PYLINTRC_DEST_FILE="$HOME/.pylintrc"

# Temp backup filename
TEMP_BACKUP_FILE=""

# Check if destination file exists
if [ -f "$PYLINTRC_DEST_FILE" ]; then
	if cmp -s "$PYLINTRC_FILE" "$PYLINTRC_DEST_FILE"; then
		true
	else
		# Determine the next available backup filename
		i=1
		while [ -f "$HOME/.pylintrc_$i" ]; do
			i=$((i + 1))
		done
		TEMP_BACKUP_FILE="$HOME/.pylintrc_$i"
		mv "$PYLINTRC_DEST_FILE" "$TEMP_BACKUP_FILE"

	# Copy the new file to destination
	cp "$PYLINTRC_FILE" "$PYLINTRC_DEST_FILE"
	fi
else
	cp "$PYLINTRC_FILE" "$PYLINTRC_DEST_FILE"
fi

errors=()

if [ "$#" -gt 0 ]; then
	# Process passed files
	for i in "$@"; do
		if [ -f "$i" ]; then
			yellow_text "pylint $i"
			pylint "$i" || {
				ERRSTR="Failed linting $i: Run 'source $VENV_DIR/bin/activate' and then 'pylint $i' to see details."
				red_text "$ERRSTR\n"
				errors+=("$ERRSTR")
			}
		else
			red_text "File $i not found, skipping."
		fi
	done
else
	# No parameters passed, process all Python files (as in original script)
	for i in .*.py; do
		yellow_text "pylint $i"
		pylint $i || {
			ERRSTR="Failed linting $i: Run 'source $VENV_DIR/bin/activate' and then 'pylint $i' to see details."
			red_text "$ERRSTR\n"
			errors+=("$ERRSTR")
		}
	done
fi

if [ -n "$TEMP_BACKUP_FILE" ]; then
	mv "$PYLINTRC_DEST_FILE" "${PYLINTRC_DEST_FILE}.new"
	mv "$TEMP_BACKUP_FILE" "$PYLINTRC_DEST_FILE"
fi

secs=$SECONDS
hrs=$(( secs/3600 )); mins=$(( (secs-hrs*3600)/60 )); secs=$(( secs-hrs*3600-mins*60 ))
printf 'pylint test took: %02d:%02d:%02d\n' $hrs $mins $secs

if [ ${#errors[@]} -eq 0 ]; then
	green_text "No pylint errors"
	exit 0
else
	red_text "=> PYLINT-ERRORS => PYLINT-ERRORS => PYLINT-ERRORS =>\n"
	for i in "${errors[@]}"; do
		red_text "$i\n"
	done

	exit ${#errors[@]}
fi
